pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    environment {
        PROJECT_NAME = sh(script: "crudini --get METADATA meta name | tail -n 1", returnStdout: true).trim()
        COMMIT_VERSION_BUMP = sh(script: "git log -1 --pretty=%B | grep '^Bump version' | grep -oP '\\d+.\\d+.\\d+(rc\\d+)?' | tail -n 1 || exit 0", returnStdout: true).trim()
        DEVOPS_PROJECT_NAME = "smh"
        REPOSITORIES_WORKSPACE = "/opt/repositories"
        DEVOPS_AWS_WORKSPACE = "${REPOSITORIES_WORKSPACE}/devops-aws"
        REPORTS_DIR = "../reports"
        REPORTS_JUNIT = "${REPORTS_DIR}/junit.xml"
        REPORTS_COVERAGE = "${REPORTS_DIR}/coverage.xml"
    }
    stages {
        stage('Test: Prepare') {
            steps {
                sh 'echo "Commit version bump: ${COMMIT_VERSION_BUMP}"'
                sh 'docker-compose -f docker-compose.yml -f docker-compose.test.yml build smh-api'
                sh 'docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm smh-dep uname -a'
            }
            post {
                always {
                    sh 'docker-compose -f docker-compose.yml -f docker-compose.test.yml logs --tail=20 smh-api'
                }
            }
        }
        stage('Test: Run') {
            steps {
                sh 'docker-compose -f docker-compose.yml -f docker-compose.test.yml exec -T smh-api mkdir -p ${REPORTS_DIR}'
                sh 'docker-compose -f docker-compose.yml -f docker-compose.test.yml exec -T smh-api chmod 777 ${REPORTS_DIR}'
                sh 'docker-compose -f docker-compose.yml -f docker-compose.test.yml exec -T smh-api pytest .. --cov --junitxml ${REPORTS_JUNIT} --cov-report xml:${REPORTS_COVERAGE}'
            }
            post {
                always{
                    junit 'reports/*junit.xml'
                }
            }
        }
        stage('Distribution: Prepare') {
            when {
                 expression {
                     return ( env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith("stable/") || env.BRANCH_NAME.startsWith("release/") ) && env.COMMIT_VERSION_BUMP
                 }
             }
            environment {
                DEVOPS_AWS_REPO = "https://github.com/polestarglobal/devops-aws.git"
                DEVOPS_AWS_REPO_CREDS_ID = "2e249059-9e76-4fdf-b3cb-1f2e74bdb29e"
                DEVOPS_AWS_BRANCH = "master"
                DEVOPS_AWS_BRANCHES = "*/${DEVOPS_AWS_BRANCH}"
            }
            steps {
                dir(env.DEVOPS_AWS_WORKSPACE) {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: env.DEVOPS_AWS_BRANCHES]],
                        doGenerateSubmoduleConfigurations: false,
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: env.DEVOPS_AWS_REPO, credentialsId: env.DEVOPS_AWS_REPO_CREDS_ID]]
                    ])
                }
            }
        }
        stage('Distribution: Build') {
            when {
                expression {
                    return ( env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith("stable/") || env.BRANCH_NAME.startsWith("release/") ) && env.COMMIT_VERSION_BUMP
                }
            }
            environment {
                DEVOPS_AWS_BRANCH = "master"
                DEVOPS_AWS_CONFIGDIR = "${DEVOPS_AWS_WORKSPACE}/cloudformation/SMH/appspec"
                IMAGEDIR = "${WORKSPACE}/images"
            }
            steps {
                parallel(
                    image: {
                        sh 'mkdir -p ${IMAGEDIR}/${DEVOPS_PROJECT_NAME}/files/ ${IMAGEDIR}/scripts'
                        sh 'echo "${COMMIT_VERSION_BUMP}" > ${IMAGEDIR}/APP-VERSION'
                        sh 'cp ${DEVOPS_AWS_CONFIGDIR}/${DEVOPS_PROJECT_NAME}.appspec.yml ${IMAGEDIR}/appspec.yml'
                        sh 'cp ${DEVOPS_AWS_CONFIGDIR}/scripts/*.sh ${IMAGEDIR}/scripts/'
                        sh 'rsync -av --progress ${WORKSPACE}/ ${IMAGEDIR}/${DEVOPS_PROJECT_NAME}/ --exclude .git --exclude .gitignore --exclude images --exclude build --exclude devops-aws --exclude tests'
                        sh 'echo "${DEVOPS_AWS_BRANCH}" > ${IMAGEDIR}/${DEVOPS_PROJECT_NAME}/DEVOPS_BRANCH'
                    },
                )
            }
        }
        stage('Distribution: Publish') {
            environment {
                AWS_S3_BUCKET = "polestar-images"
                AWS_S3_PREFIX = "${DEVOPS_PROJECT_NAME}"
                AWS_APPLICATION_NAME = "${DEVOPS_PROJECT_NAME}"
                AWS_DEPLOYMENT_GROUP_NAME = "stage-smh"
                AWS_DEPLOYMENT_CONFIG = "CodeDeployDefault.OneAtATime"
                AWS_REGION = "us-east-1"
                AWS_PACKAGE_NAME = "${PROJECT_NAME}"
            }
            when {
                expression {
                    return ( env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith("stable/") || env.BRANCH_NAME.startsWith("release/") ) && env.COMMIT_VERSION_BUMP
                }
            }
            steps {
                parallel(
                    image: {
                        // zip package name hack
                        script {
                            currentBuild.displayName = env.AWS_PACKAGE_NAME
                        }
                        step([
                            $class: 'AWSCodeDeployPublisher',
                            s3bucket: env.AWS_S3_BUCKET,
                            s3prefix: env.AWS_S3_PREFIX,
                            applicationName: env.AWS_APPLICATION_NAME,
                            deploymentGroupName: env.AWS_DEPLOYMENT_GROUP_NAME,
                            deploymentConfig: env.AWS_DEPLOYMENT_CONFIG,
                            deploymentGroupAppspec: false,
                            waitForCompletion: false,
                            region: env.AWS_REGION,
                            includes: '**',
                            subdirectory: 'images',
                            versionFileName: 'APP-VERSION'
                        ])
                    },
                )
            }
            post {
                always {
                    // zip package name hack (rollback)
                    script {
                        currentBuild.displayName = env.DISPLAY_NAME
                    }
                }
                success {
                    script {
                        slack.notify(
                            "SMH API version *${env.COMMIT_VERSION_BUMP}* was successfully deployed on <https://smh.polestar-staging.com|staging environment>",
                            "#ptrac_enterprise",
                            "good"
                        )
                    }
                }
                failure {
                    script {
                        slack.notify(
                            "SMH API version *${env.COMMIT_VERSION_BUMP}* failed to deploy on staging environment",
                            "#ptrac_enterprise",
                            "danger"
                        )
                    }
                }
            }
        }    
    }
}
