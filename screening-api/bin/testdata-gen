#!/usr/bin/env python
import logging
import os
import sys
from argparse import ArgumentParser
from datetime import datetime, timedelta

# import jwt

from screening_api.lib.auth.factories import UserFactory, UserTokenFactory
from screening_api.main import create_app
from screening_api.screenings.enums import Severity
from screening_api.testing.factories import Factory

log = logging.getLogger(__name__)


def get_factory(app):
    session = app.session_factory()
    return Factory.create(session)


def generate_ships(factory, num, **data):
    log.info("Generating %d ships", num)

    for _ in range(num):
        ship = factory.create_ship(**data)
        log.debug(" Ship %s created", ship)


def generate_screenings(factory, num, **data):
    log.info("Generating %s screenings", num)

    for _ in range(num):
        if not 'ship_id' in data:
            ship = factory.create_ship()
            data['ship'] = ship
        screening = factory.create_screening(**data)
        log.debug(" Screening %s created", screening)


def generate_screenings_history(factory, num, **data):
    log.info("Generating %d screening history", num)

    if not 'screening_id' in data:
        screening = factory.create_screening()
        data['screening'] = screening

    for _ in range(num):
        history = factory.create_screenings_history(**data)
        log.debug(" Screening history %s created", history)


def generate_ship_sanctions(factory, num, **data):
    log.info("Generating %d ship sanction(s)", num)

    for _ in range(num):
        if not 'ship_id' in data:
            ship = factory.create_ship()
            data['ship'] = ship

        ship_sanction = factory.create_ship_sanction(**data)
        log.debug(" Ship sanction %s created", ship_sanction)


def generate_user(**data):
    log.info("Generating user")
    return UserFactory(**data)


def generate_token(app, user):
    log.info("Generating JWT token")

    factory = UserTokenFactory(app.authentication.secret_key)
    return factory.create(user=user)


def get_parser():
    parser = ArgumentParser(prog='testdata-gen',description='Test data generator.')
    parser.add_argument('--verbose', '-v', action='store_true')
    subparsers = parser.add_subparsers(help='data type')

    ships_parser = subparsers.add_parser('ships')
    ships_parser.set_defaults(module='ships')
    ships_parser.add_argument(
        'num', type=int, help='ships number to generate')
    ships_parser.add_argument(
        '--imo_id', type=int, default=None,
        help='IMO ID used to generate',
    )

    screenings_parser = subparsers.add_parser('screenings')
    screenings_parser.set_defaults(module='screenings')
    screenings_parser.add_argument(
        'num', type=int, help='screenings number to generate')
    screenings_parser.add_argument(
        '--account_id', type=int, default=None,
        help='account ID used to generate',
    )
    screenings_parser.add_argument(
        '--severity', type=Severity, choices=list(Severity),
        help='severity used to generate',
    )
    screenings_parser.add_argument(
        '--ship_id', type=int, default=None,
        help='ship ID used to generate',
    )

    screenings_parser = subparsers.add_parser('history')
    screenings_parser.set_defaults(module='history')
    screenings_parser.add_argument(
        'num', type=int, help='screenings history number to generate')
    screenings_parser.add_argument(
        '--severity', type=Severity, choices=list(Severity),
        help='severity used to generate',
    )
    screenings_parser.add_argument(
        '--screening_id', type=int, default=None,
        help='Screening ID used to generate',
    )

    ship_sanctions_parser = subparsers.add_parser('ship_sanctions')
    ship_sanctions_parser.set_defaults(module='ship_sanctions')
    ship_sanctions_parser.add_argument(
        'num', type=int, help='ship sanctions number to generate')
    ship_sanctions_parser.add_argument(
        '--ship_id', type=int, default=None,
        help='Ship ID used to generate',
    )

    token_parser = subparsers.add_parser('token')
    token_parser.set_defaults(module='token')
    token_parser.add_argument(
        '--account_id', type=int, default=None,
        help='account ID used to generate',
    )

    return parser


def setup_logging():
    sh = logging.StreamHandler()

    log.addHandler(sh)
    log.setLevel(logging.INFO)


def main(argv):
    setup_logging()

    parser = get_parser()

    if len(argv) == 0:
        parser.print_help()
        sys.exit(1)

    namespace = parser.parse_args(argv)

    if namespace.verbose:
        log.setLevel(logging.DEBUG)

    app = create_app(os.environ)
    factory = get_factory(app)

    if namespace.module == 'ships':
        data = {}
        if namespace.imo_id is not None:
            data['imo_id'] = namespace.imo_id
        return generate_ships(factory, namespace.num, **data)

    elif namespace.module == 'screenings':
        data = {}
        if namespace.account_id is not None:
            data['account_id'] = namespace.account_id
        if namespace.severity is not None:
            data['severity'] = namespace.severity
        if namespace.ship_id is not None:
            data['ship_id'] = namespace.ship_id
        return generate_screenings(factory, namespace.num, **data)

    elif namespace.module == 'history':
        data = {}
        if namespace.severity is not None:
            data['severity'] = namespace.severity
        if namespace.screening_id is not None:
            data['screening_id'] = namespace.screening_id
        return generate_screenings_history(factory, namespace.num, **data)

    elif namespace.module == 'ship_sanctions':
        data = {}
        if namespace.ship_id is not None:
            data['ship_id'] = namespace.ship_id
        return generate_ship_sanctions(factory, namespace.num, **data)

    elif namespace.module == 'token':
        data = {
            'exp': datetime.utcnow() + timedelta(days=1460)
        }
        if namespace.account_id is not None:
            data['account_id'] = namespace.account_id
        user = generate_user(**data)
        print("User: ", user)
        token = generate_token(app, user)
        print("JWT token: ", token)

    else:
        parser.print_help()

if __name__ == '__main__':
    main(sys.argv[1:])
